name: '.NET MAUI - Apple Provisioning'
description: 'A Github action that helps provision Certificates & Provisioning Profiles for building .NET MAUI iOS and MacCatalyst apps.'
branding:
  icon: smartphone
  color: purple
inputs:
  keychain:
    description: 'Keychain file to import certificates to (can leave blank, will default to build.keychain-db). Example, "build.keychain-db".'
    required: false
  keychain-password:
    description: 'Keychain password for the specified keychain (can leave blank).  Example, "build".'
    required: false
  certificate:
    description: 'Apple certificate to import into the keychain.  This should be either the filename of the .p12/.pfx certificate itself, or the name of an environment variable containing a Base64 encoded string representation of the binary .p12/.pfx certificate file. Example, "path/to/dist.p12" or "APPLE_DIST_CERT".'
    required: false
  certificate-passphrase:
    description: 'Passphrase for the specified certificate file if required.'
    required: false
  bundle-identifiers:
    description: 'Comma separated list of one or more app bundle-identifiers to filter provisioning profiles for.  Example, "com.mycompany.myapp" or "com.mycompany.myapp1,com.mycompany.myapp2".'
    required: true
  profile-types:
    description: 'Comma separated list of one or more types of provisioning profiles to download and install for the matching bundle-identifier(s).  Example, "IOS_APP_ADHOC" OR "IOS_APP_ADHOC,IOS_APP_STORE".'
    required: false
  app-store-connect-key-id:
    description: 'The App Store Connect API issuer ID or name of an environment variable containing the value.  Example, "ABC123XYZ". This value can also be set using the "APP_STORE_CONNECT_KEY_ID" environment variable.'
    required: false
  app-store-connect-issuer-id:
    description: 'The App Store Connect API issuer ID or name of an environment variable containing the value.  Example, "aaaa-1111-22222-bbbb-cccc". This value can also be set using the "APP_STORE_CONNECT_ISSUER_ID" environment variable.'
    required: false
  app-store-connect-private-key:
    description: 'The App Store Connect API private key.  This should be either the filename of the .p8 private key itself, or the name of an environment variable containing the string contents of the .p8 private key file. Example, "path/to/key.p8" or "APP_STORE_CONNECT_PRIVATE_KEY". This value can also be set using the "APP_STORE_CONNECT_PRIVATE_KEY" environment variable.'
    required: false
  install-app-store-connect-private-key:
    description: 'Flag to indicate if the App Store Connect private key should be saved to disk.  Default is false.'
    required: false
  app-store-connect-private-key-directory:
    description: 'Directory to save the App Store Connect private key to.  Default is ~/private_keys'
    required: false
runs:
  using: 'composite'
  steps:
    - shell: pwsh
      run: |
        & dotnet tool install --global AppleDev.Tools --version 0.5.0

        $toolArgs = @("ci", "provision")

        $keychain = "${{ inputs.keychain }}".Trim()
        $keychainPassword = "${{ inputs.keychain-password }}".Trim()
        $certificate = "${{ inputs.certificate }}".Trim()
        $certificatePassphrase = "${{ inputs.certificate-passphrase }}".Trim()
        $appStoreConnectKeyId = "${{ inputs.app-store-connect-key-id }}".Trim()
        $appStoreConnectIssuerId = "${{ inputs.app-store-connect-issuer-id }}".Trim()
        $appStoreConnectPrivateKey = "${{ inputs.app-store-connect-private-key }}".Trim()
        $installAppStoreConnectPrivateKey = "${{ inputs.install-app-store-connect-private-key }}".Trim()
        $appStoreConnectPrivateKeyDirectory = "${{ inputs.app-store-connect-private-key-directory }}".Trim()
        $profileTypes = "${{ inputs.profile-types }}".Split(',')
        $bundleIdentifiers = "${{ inputs.bundle-identifiers }}".Split(',')

        if ($keychain) {
          $toolArgs += "--keychain"
          $toolArgs += $keychain
        }

        if ($keychainPassword) {
          $toolArgs += "--keychain-password"
          $toolArgs += $keychainPassword
        }

        if ($certificate) {
          $toolArgs += "--certificate"
          $toolArgs += $certificate
        }

        if ($certificatePassphrase) {
          $toolArgs += "--certificate-passphrase"
          $toolArgs += $certificatePassphrase
        }

        if ($appStoreConnectKeyId) {
          $toolArgs += "--api-key-id"
          $toolArgs += $appStoreConnectKeyId
        }

        if ($appStoreConnectIssuerId) {
          $toolArgs += "--api-issuer-id"
          $toolArgs += $appStoreConnectIssuerId
        }

        if ($appStoreConnectPrivateKey) {
          $toolArgs += "--api-private-key"
          $toolArgs += $appStoreConnectPrivateKey
        }

        if ($installAppStoreConnectPrivateKey) {
          $toolArgs += "--install-api-private-key"
        }

        if ($appStoreConnectPrivateKeyDirectory) {
          $toolArgs += "--api-private-key-dir"
          $toolArgs += $appStoreConnectPrivateKeyDirectory
        }

        foreach ($profileType in $profileTypes) {
          if ($profileType) {
          $profileType = $profileType.Trim()
          if ($profileType) {
            $toolArgs += "--profile-type"
            $toolArgs += $profileType
          }
          }
        }

        foreach ($bundleIdentifier in $bundleIdentifiers) {
          if ($bundleIdentifier) {
          $bundleIdentifier = $bundleIdentifier.Trim()
          if ($bundleIdentifier) {
            $toolArgs += "--bundle-identifier"
            $toolArgs += $bundleIdentifier
          }
          }
        }

        try {
          & apple $toolArgs
        } catch {
          write-host $_
          exit 1
        }
        if ($LASTEXITCODE -ne 0) {
          exit $LASTEXITCODE
        }
